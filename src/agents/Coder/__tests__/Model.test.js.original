import { describe, it, expect } from "vitest"
import Model from "./Model.js"

const config = {
	"gpt-4.1": {
		// ... omitted code ...
		context: { window: 1_047_576, output: 32_768, date: "2024-06-01", name: "gpt-4.1-2025-04-14" },
	},
	"gpt-4.1-mini": {
		// ... omitted code ...
		context: { window: 1_047_576, output: 32_768, date: "2024-06-01", name: "gpt-4.1-mini-2025-04-14" },
	},
	"gpt-4.1-nano": {
		// ... omitted code ...
		context: { window: 1_047_576, output: 32_768, date: "2024-06-01", name: "gpt-4.1-nano-2025-04-14" },
	},
	"gpt-4.5-preview": {
		// ... omitted code ...
		context: { window: 128_000, output: 16_384, date: "2023-10-01", name: "gpt-4.5-preview-2025-02-27" },
	},
	"gpt-4o": {
		// ... omitted code ...
		context: { window: 128_000, output: 16_384, date: "2023-10-01", name: "gpt-4o-2024-08-06" },
	},
	"gpt-4o-mini": {
		// ... omitted code ...
		context: { window: 128_000, output: 16_384, date: "2023-10-01", name: "gpt-4o-mini-2024-07-18" },
	},
	"o3": {
		// ... omitted code ...
		context: { window: 200_000, output: 100_000, date: "2024-06-01", name: "o3-2025-04-16" },
	},
	"o3-pro": {
		// ... omitted code ...
		context: { window: 200_000, output: 100_000, date: "2024-06-01", name: "o3-pro-2025-06-10" },
	},
	"o3-mini": {
		// ... omitted code ...
		context: { window: 200_000, output: 100_000, date: "2024-06-01", name: "o3-mini-2025-01-31" },
	},
	"o1": {
		// ... omitted code ...
		context: { window: 200_000, output: 100_000, date: "2023-10-01", name: "o1-2024-12-17" },
	},
	"o1-pro": {
		// ... omitted code ...
		context: { window: 200_000, output: 100_000, date: "2023-10-01", name: "o1-pro-2025-03-19" },
	},
	"o1-mini": {
		// ... omitted code ...
		context: { window: 128_000, output: 65_536, date: "2023-10-01", name: "o1-mini-2024-09-12" },
	},
	"o4-mini": {
		// ... omitted code ...
		context: { window: 200_000, output: 100_000, date: "2024-06-01", name: "o4-mini-2025-04-16" },
	},
}
const models = Object.fromEntries(
	Object.entries(config).map(([name, props]) => ([name, Model.from({ ...props, name })]))
)

describe("Model", () => {
	it("should load model with aliases", () => {
		expect(models.o1).toBeDefined()
		expect(models.o1.context.toObject()).toEqual(config.o1.context)
	})
})

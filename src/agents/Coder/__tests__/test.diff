diff --git a/src/llm/protocols/CoderProtocol/ChatMessage.js b/src/llm/protocols/CoderProtocol/ChatMessage.js
index 14d3ede..9424593 100644
--- a/src/llm/protocols/CoderProtocol/ChatMessage.js
+++ b/src/llm/protocols/CoderProtocol/ChatMessage.js
@@ -6,44 +6,7 @@ import Prompt from "../../../lib/chat/Prompt.js"
  * @property {string} username
  */
 class ChatMessage extends Prompt {
-	static ELEMENTS_OF = [ChatMessage]
-	static ROLES = [...Prompt.ROLES, 'os']
-	static PROPERTIES = {
-		...Prompt.PROPERTIES,
-		username: String,
-	}
-	static DEFAULTS = {
-		...Prompt.DEFAULTS,
-	}
-	static SAVE_FIRST_PROP = "username"
-	static SHORT_ROLES_ALIASES = {
-		"user": "usr"
-	}
-	/**
-	 * @type {string}
-	 */
-	username
-
-	constructor(username = "", props = {}) {
-		const {
-			role = Prompt.DEFAULTS.role ?? "user"
-		} = props
-		super(role, props)
-		this.username = props?.username ?? username
-	}
-
-	/**
-	 * Adds a nested message to the current instance.
-	 * @param {ChatMessage} message - The element to add (can be an object or string).
-	 * @param {string|null} field - An optional grouping field.
-	 * @param {Record<string, any>} defaultValues - Optional default values for the element.
-	 * @returns {ChatMessage} - Added element.
-	 */
-	add(message, field = null, defaultValues = {}) {
-		super.add(message, field, defaultValues)
-		const arr = this.getElements()
-		return arr[arr.length - 1]
-	}
+	// ... existing code ...

 	/**
 	 * @param {object} [props={}]
@@ -69,7 +32,7 @@ class ChatMessage extends Prompt {
 		const self = /** @type {typeof ChatMessage} */ (this.constructor)
 		const flat = this.getFlat()

-		let roleWidth = short ? 3 : 6
+		let roleWidth = short ? 3 : 9
 		let userWidth = 0
 		let contentWidth = 0

@@ -100,8 +63,8 @@ class ChatMessage extends Prompt {
 			let prefix = [pad(role, roleWidth)]
 			if (user) prefix.push("@" + pad(user, userWidth))
 			let pre = prefix.join(" ")
-			const label = pad(pre, roleWidth + userWidth + (user ? 2 : 0))
-			const fullLabel = label + ":".padEnd(padding + 1)
+			const label = pad(pre, roleWidth + userWidth) // Remove the extra space before colon
+			const fullLabel = label + ":" // Add colon without padding

 			const wrapped = content.match(new RegExp(`.{1,${contentWidth}}`, "g")) || []
 			return wrapped.map((line, i) => i === 0 ? fullLabel + line : " ".repeat(fullLabel.length) + line).join("\n")
@@ -110,37 +73,7 @@ class ChatMessage extends Prompt {
 		return lines.join("\n\n")
 	}

-	/**
-	 * @param {Function[]} classes
-	 * @returns {ChatMessage[]}
-	 */
-	getElements(classes = []) {
-		// @todo fix: Type 'NANOElement[]' is not assignable to type 'ChatMessage[]'.
-		//   Type 'NANOElement' is missing the following properties from type 'ChatMessage': username, getFlat, role, content, toArrayts(2322)
-		return super.getElements(classes)
-	}
-
-	/**
-	 * @param {object} [props={}]
-	 * @returns {ChatMessage}
-	 */
-	static from(props = {}) {
-		return new this(props.username, props)
-	}
-
-	/**
-	 * @returns {Array<{element: ChatMessage, level: number}>}
-	 */
-	getFlat({ level = 0 } = { level: 0 }) {
-		const arr = []
-		arr.push({ element: this, level })
-		for (const el of this.getElements()) {
-			for (const child of el.getFlat({ level: level + 1 })) {
-				arr.push(child)
-			}
-		}
-		return arr
-	}
+	// ... rest of the code ...
 }

-export default ChatMessage
+export default ChatMessage
\ No newline at end of file
diff --git a/src/llm/protocols/CoderProtocol/ChatMessage.test.js b/src/llm/protocols/CoderProtocol/ChatMessage.test.js
index aea600c..87f1465 100644
--- a/src/llm/protocols/CoderProtocol/ChatMessage.test.js
+++ b/src/llm/protocols/CoderProtocol/ChatMessage.test.js
@@ -11,16 +11,16 @@ describe("ChatMessage", () => {
 	describe("getFlat()", () => {
 		it("should properly return flat messages", () => {
 			const flat = chat.getFlat()
-			expect(flat).toHaveLength(3)
+			expect(flat).toHaveLength(4)
 		})
 	})
 	describe("toString()", () => {
 		it("should properly format standard ", () => {
 			expect(chat.toString()).toBe([
 				"system:\n# Software developer\nI am an expert of a Javascript",
-				"assistant:\nHello! How can I help you?",
-				"user:\nHi. Write me a function y.",
-				"assistant:\nconst y = x => x ** x",
+				"assistant @mac:\nHello! How can I help you?",
+				"user @me:\nHi. Write me a function y.",
+				"assistant @mac:\nconst y = x => x ** x",
 			].join("\n\n"))
 		})
 		it("should properly format standard format", () => {
@@ -29,7 +29,7 @@ describe("ChatMessage", () => {
 				"                I am an expert of a Javascript",
 				"assistant @mac: Hello! How can I help you?",
 				"user      @me:  Hi. Write me a function y.",
-				"assistant:     const y = x => x ** x",
+				"assistant @mac: const y = x => x ** x",
 			].join("\n\n"))
 		})
 		it("should properly format short format", () => {
diff --git a/src/cli/models/ChatPrompt.js b/src/cli/models/ChatPrompt.js
index f9df372..96fedd9 100644
--- a/src/cli/models/ChatPrompt.js
+++ b/src/cli/models/ChatPrompt.js
@@ -15,7 +15,8 @@ class ChatPrompt extends Prompt {
 	 */
 	get recent() {
 		const arr = this.getElements()
-		return arr.length ? arr[arr.length - 1] : this
+		const recent = arr.length ? arr[arr.length - 1] : this
+		return recent
 	}
 	get isAssistant() {
 		return "assistant" === this.role
@@ -77,11 +78,11 @@ class ChatPrompt extends Prompt {
 	}
 	/**
 	 * @param {Array} classes
-	 * @returns {Array<ChatPrompt>}
+	 * @returns {Array<ChatPrompt|Prompt>}
 	 */
 	getElements(classes = []) {
 		const arr = super.getElements(classes)
-		return arr.map(a => ChatPrompt.from(a.toObject()))
+		return arr.map(a => a instanceof ChatPrompt ? a : ChatPrompt.from(a.toObject()))
 	}
 	/**
 	 * Returns string representation
